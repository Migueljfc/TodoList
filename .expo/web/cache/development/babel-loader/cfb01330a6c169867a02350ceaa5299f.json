{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Task from \"./components/Task\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      task = _useState2[0],\n      setTask = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskItems = _useState4[0],\n      setTaskItems = _useState4[1];\n\n  var handleAddTask = function handleAddTask() {\n    Keyboard.dismiss();\n    setTaskItems([].concat(_toConsumableArray(taskItems), [task]));\n    setTask(null);\n  };\n\n  var completeTask = function completeTask(index) {\n    var itemsCopy = _toConsumableArray(taskItems);\n\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.taskWrapeer\n  }, React.createElement(Text, {\n    style: styles.sectionTitle\n  }, \"Todo List\"), React.createElement(View, {\n    style: styles.items\n  }, taskItems.map(function (item, index) {\n    return React.createElement(TouchableOpacity, {\n      key: index,\n      onPress: function onPress() {\n        return completeTask(index);\n      }\n    }, React.createElement(Task, {\n      text: item\n    }));\n  }))), React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.OS == 'ios' ? \"padding\" : \"height\",\n    style: styles.writeTaskWrapper\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: 'Write a task',\n    value: task,\n    onChangeText: function onChangeText(text) {\n      return setTask(text);\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return handleAddTask();\n    }\n  }, React.createElement(View, {\n    style: styles.addWrapper\n  }, React.createElement(Text, {\n    style: styles.addText\n  }, \"+\")))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED'\n  },\n  taskWrapeer: {\n    paddingTop: 80,\n    paddingHorizontal: 20\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  items: {\n    marginTop: 30\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    width: 250,\n    paddingHorizontal: 15,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  },\n  addText: {}\n});","map":{"version":3,"sources":["/home/miguel/Documents/reactnative/TodoList/App.js"],"names":["React","useState","Task","App","task","setTask","taskItems","setTaskItems","handleAddTask","Keyboard","dismiss","completeTask","index","itemsCopy","splice","styles","container","taskWrapeer","sectionTitle","items","map","item","Platform","OS","writeTaskWrapper","input","text","addWrapper","addText","StyleSheet","create","flex","backgroundColor","paddingTop","paddingHorizontal","fontSize","fontWeight","textAlign","marginTop","position","bottom","width","flexDirection","justifyContent","alignItems","paddingVertical","borderRadius","borderColor","borderWidth","height"],"mappings":"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","sourcesContent":["import React, {useState} from  'react';\nimport { KeyboardAvoidingView, Platform, StyleSheet, Text, TextInput, TouchableOpacity, Keyboard, ScrollView, View } from 'react-native';\nimport Task from './components/Task';\n\nexport default function App() {\n  const[task, setTask] = useState();\n  const [taskItems, setTaskItems] = useState([]);\n\n  const handleAddTask = () => {\n    Keyboard.dismiss();\n    setTaskItems([...taskItems, task])\n    setTask(null);\n  }\n  const completeTask = (index) => {\n    let itemsCopy = [...taskItems];\n    itemsCopy.splice(index,1);\n    setTaskItems(itemsCopy);\n  }\n\n  return (\n    <View style={styles.container}>\n      {/*Tasks*/}\n      <View style={styles.taskWrapeer}>\n        <Text style={styles.sectionTitle}>Todo List</Text> \n\n        <View style={styles.items}>\n          {\n            taskItems.map((item,index) =>{\n              return(\n                <TouchableOpacity key={index} onPress={() => completeTask(index)}>\n                  <Task  text={item} />\n                </TouchableOpacity>\n\n              ) \n            })\n          }\n        </View>\n        \n      </View>\n\n\n\n    {/*Write a task*/}\n    <KeyboardAvoidingView\n      behavior={Platform.OS == 'ios'? \"padding\" : \"height\"}\n      style={styles.writeTaskWrapper}\n    >\n      <TextInput style={styles.input} placeholder={'Write a task'} value={task} onChangeText={text => setTask(text)}/>\n\n      <TouchableOpacity onPress={() => handleAddTask()} >\n        <View style={styles.addWrapper}>\n          <Text style={styles.addText}>+</Text>\n        </View>\n      </TouchableOpacity>\n    </KeyboardAvoidingView>\n    </View>\n\n    \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED',\n   \n  },\n  taskWrapeer:{\n    paddingTop: 80,\n    paddingHorizontal: 20,\n\n  },\n  sectionTitle:{\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  items:{\n    marginTop: 30,\n\n\n  },\n\n  writeTaskWrapper:{\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center',\n  },\n  input:{\n    paddingVertical: 15,\n    width: 250,\n    paddingHorizontal: 15,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addWrapper:{\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText:{},\n\n});\n"]},"metadata":{},"sourceType":"module"}